import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';
import { EnvironmentService } from './config/environment/environment.service';
import { HttpExceptionFilter } from './exceptions/http-exception';
import { ResponseInterceptor } from './interceptors/response-interceptor';

import { INestApplication, Logger, ValidationPipe } from '@nestjs/common';
import { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';
import { UserModel } from './database/models/user/user.model';
import metadata from './metadata'; // <-- file auto-generated by the "PluginMetadataGenerator"

class Hello {
  public hello = 'hello';
}

class Server {
  static async bootstrap() {
    const app = await NestFactory.create(AppModule, { snapshot: true });
    app.enableCors();
    app.useGlobalInterceptors(new ResponseInterceptor());
    app.useGlobalFilters(new HttpExceptionFilter());
    app.useGlobalPipes(new ValidationPipe({ whitelist: true }));

    await Server.configureSwagger(app);

    await app.listen(EnvironmentService.getValue('appPort'));

    const nack = new UserModel().$modelClass;
    const nacker = new nack().toJSON();

    console.log('Stared Server on port 8080');
  }

  static async configureSwagger(app: INestApplication) {
    Logger.log('configureSwagger', 'Main.ts');

    const config = new DocumentBuilder()
      .setTitle('Blog API')
      .setDescription(
        'An Api endpoints for a full functional Blog app (Personal Project)',
      )
      .setVersion('1.0')
      .addTag('blog')
      .build();

    await SwaggerModule.loadPluginMetadata(metadata);

    const document = SwaggerModule.createDocument(app, config);

    SwaggerModule.setup('docs', app, document);
  }
}

Server.bootstrap();
